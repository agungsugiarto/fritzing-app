name: Create Multi-Platform Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      changelog:
        description: 'Changelog or description for the release'
        required: false
        default: ''
      target:
        description: 'Select the target platform (all, linux, macos, windows)'
        required: true
        default: 'all'
        options:
          - all
          - linux
          - macos
          - windows

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: linux
          - os: macos-latest
            target: macos
          - os: windows-latest
            target: windows
      fail-fast: false
    if: |
      github.event.inputs.target == 'all' ||
      (github.event.inputs.target == 'linux' && matrix.target == 'linux') ||
      (github.event.inputs.target == 'macos' && matrix.target == 'macos') ||
      (github.event.inputs.target == 'windows' && matrix.target == 'windows')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        host: ${{ matrix.os == 'windows-latest' && 'windows' || 'linux' }}
        target: desktop
        arch: x86_64
        dir: ${{ runner.workspace }}/Qt

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgit2-dev libboost-all-dev qt5-qmake qtbase5-dev

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install libgit2 boost qt@5

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        git clone https://github.com/microsoft/vcpkg
        ./vcpkg/bootstrap-vcpkg.bat
        ./vcpkg/vcpkg install libgit2:x64-windows boost:x64-windows
        ./vcpkg/vcpkg integrate install

    - name: Configure project with CMake (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir build
        cd build
        cmake ..

    - name: Configure project with CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir build
        cd build
        cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake ..

    - name: Build project (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd build
        make -j$(nproc)

    - name: Build project (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        cmake --build . --config Release

    - name: Archive build artifacts (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd build
        tar -czvf Fritzing-${{ github.event.inputs.version }}-${{ matrix.os }}.tar.gz Fritzing*

    - name: Archive build artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        Compress-Archive -Path Fritzing* -DestinationPath Fritzing-${{ github.event.inputs.version }}-windows.zip

    - name: Upload Release Assets
      uses: actions/upload-artifact@v3
      with:
        name: Fritzing-${{ github.event.inputs.version }}-${{ matrix.os }}
        path: |
          build/Fritzing-${{ github.event.inputs.version }}-*.tar.gz
          build/Fritzing-${{ github.event.inputs.version }}-*.zip

    - name: Create GitHub Release
      if: matrix.os == 'ubuntu-latest'
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ github.event.inputs.version }}
        tag_name: ${{ github.event.inputs.version }}
        body: ${{ github.event.inputs.changelog }}
        draft: false
        prerelease: false
        files: |
          build/Fritzing-${{ github.event.inputs.version }}-*.tar.gz
          build/Fritzing-${{ github.event.inputs.version }}-*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Notify Success
      run: echo "Release ${{ github.event.inputs.version }} created successfully on ${{ matrix.os }}!"
