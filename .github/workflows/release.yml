name: Create Multi-Platform Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      changelog:
        description: 'Changelog or description for the release'
        required: false
        default: ''
      target:
        description: 'Select the target platform (all, linux, macos, windows)'
        required: true
        default: 'all'
        options:
          - all
          - linux
          - macos
          - windows

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: linux
          - os: macos-latest
            target: macos
          - os: windows-latest
            target: windows
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Determine if build is needed
      id: check_target
      run: |
        if [[ "${{ github.event.inputs.target }}" == "all" || "${{ matrix.target }}" == "${{ github.event.inputs.target }}" ]]; then
          echo "BUILD_NEEDED=true" >> $GITHUB_ENV
        else
          echo "BUILD_NEEDED=false" >> $GITHUB_ENV
        fi

    - name: Update aqtinstall
      if: env.BUILD_NEEDED == 'true' && matrix.os == 'ubuntu-latest'
      run: |
        pip install --upgrade aqtinstall

    - name: Set up Qt (Linux)
      if: env.BUILD_NEEDED == 'true' && matrix.os == 'ubuntu-latest'
      run: |
        # Try aqtinstall
        aqt install-qt linux desktop --version 5.15.2 --arch x86_64 || {
          # Fallback to package manager
          sudo apt-get update
          sudo apt-get install -y qtbase5-dev
        }

    - name: Set up Qt (macOS)
      if: env.BUILD_NEEDED == 'true' && matrix.os == 'macos-latest'
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        host: macos
        target: desktop
        arch: x86_64
        dir: ${{ runner.workspace }}/Qt

    - name: Set up Qt (Windows)
      if: env.BUILD_NEEDED == 'true' && matrix.os == 'windows-latest'
      run: |
        # Uncomment one of the following methods
        
        # Method 1: Using Chocolatey
        # choco install qt --version 5.15.2 --installargs 'ADD_CMAKE=1'

        # Method 2: Using vcpkg
        git clone https://github.com/microsoft/vcpkg
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg install qt5
        .\vcpkg\vcpkg integrate install

        # Method 3: Manual Installation
        # powershell -Command "& {
        #   $url = 'https://download.qt.io/official_releases/qt/5.15/5.15.2/qt-opensource-windows-x86-5.15.2.exe'
        #   $output = 'qt-installer.exe'
        #   Invoke-WebRequest -Uri $url -OutFile $output
        #   Start-Process -Wait -FilePath $output -ArgumentList '/S' # /S is for silent installation
        # }"

    - name: Install dependencies (Linux)
      if: env.BUILD_NEEDED == 'true' && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgit2-dev libboost-all-dev

    - name: Install dependencies (macOS)
      if: env.BUILD_NEEDED == 'true' && matrix.os == 'macos-latest'
      run: |
        brew update
        brew install libgit2 boost

    - name: Install dependencies (Windows)
      if: env.BUILD_NEEDED == 'true' && matrix.os == 'windows-latest'
      run: |
        git clone https://github.com/microsoft/vcpkg
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg install libgit2:x64-windows boost:x64-windows
        .\vcpkg\vcpkg integrate install

    - name: Configure project with CMake (Linux/macOS)
      if: env.BUILD_NEEDED == 'true' && matrix.os != 'windows-latest'
      run: |
        mkdir build
        cd build
        cmake ..

    - name: Configure project with CMake (Windows)
      if: env.BUILD_NEEDED == 'true' && matrix.os == 'windows-latest'
      run: |
        mkdir build
        cd build
        cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake ..

    - name: Build project (Linux/macOS)
      if: env.BUILD_NEEDED == 'true' && matrix.os != 'windows-latest'
      run: |
        cd build
        make -j$(nproc)

    - name: Build project (Windows)
      if: env.BUILD_NEEDED == 'true' && matrix.os == 'windows-latest'
      run: |
        cd build
        cmake --build . --config Release

    - name: Archive build artifacts (Linux/macOS)
      if: env.BUILD_NEEDED == 'true' && matrix.os != 'windows-latest'
      run: |
        cd build
        tar -czvf Fritzing-${{ github.event.inputs.version }}-${{ matrix.target }}.tar.gz Fritzing*

    - name: Archive build artifacts (Windows)
      if: env.BUILD_NEEDED == 'true' && matrix.os == 'windows-latest'
      run: |
        cd build
        Compress-Archive -Path Fritzing* -DestinationPath Fritzing-${{ github.event.inputs.version }}-windows.zip

    - name: Upload Release Assets
      if: env.BUILD_NEEDED == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: Fritzing-${{ github.event.inputs.version }}-${{ matrix.target }}
        path: |
          build/Fritzing-${{ github.event.inputs.version }}-*.tar.gz
          build/Fritzing-${{ github.event.inputs.version }}-*.zip

    - name: Create GitHub Release
      if: env.BUILD_NEEDED == 'true'
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ github.event.inputs.version }}
        tag_name: ${{ github.event.inputs.version }}
        body: ${{ github.event.inputs.changelog }}
        draft: false
        prerelease: false
        files: |
          build/Fritzing-${{ github.event.inputs.version }}-*.tar.gz
          build/Fritzing-${{ github.event.inputs.version }}-*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Notify Success
      run: echo "Release ${{ github.event.inputs.version }} created successfully for target ${{ github.event.inputs.target }}!"
